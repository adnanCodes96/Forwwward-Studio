/*! For license information please see main.455e35b3f5a6406ddc6f.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/@glidejs/glide/dist/glide.esm.js":(e,t,n)=>{function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function a(e){return a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},a(e)}function c(e,t){return c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},c(e,t)}function l(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=a(e);if(t){var r=a(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return l(this,n)}}function u(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=a(e)););return e}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=u(e,t);if(i){var r=Object.getOwnPropertyDescriptor(i,t);return r.get?r.get.call(arguments.length<3?e:n):r.value}},f.apply(this,arguments)}n.r(t),n.d(t,{default:()=>Q});var g={type:"slider",startAt:0,perView:1,focusAt:0,gap:10,autoplay:!1,hoverpause:!0,keyboard:!0,bound:!1,swipeThreshold:80,dragThreshold:120,perSwipe:"",touchRatio:.5,touchAngle:45,animationDuration:400,rewind:!0,rewindDuration:800,animationTimingFunc:"cubic-bezier(.165, .840, .440, 1)",waitForTransition:!0,throttle:10,direction:"ltr",peek:0,cloningRatio:1,breakpoints:{},classes:{swipeable:"glide--swipeable",dragging:"glide--dragging",direction:{ltr:"glide--ltr",rtl:"glide--rtl"},type:{slider:"glide--slider",carousel:"glide--carousel"},slide:{clone:"glide__slide--clone",active:"glide__slide--active"},arrow:{disabled:"glide__arrow--disabled"},nav:{active:"glide__bullet--active"}}};function h(e){console.error("[Glide warn]: ".concat(e))}function m(e){return parseInt(e)}function p(e){return"string"==typeof e}function v(e){var t=i(e);return"function"===t||"object"===t&&!!e}function y(e){return"function"==typeof e}function w(e){return void 0===e}function b(e){return e.constructor===Array}function _(e,t,n){var i={};for(var r in t)y(t[r])?i[r]=t[r](e,i,n):h("Extension must be a function");for(var s in i)y(i[s].mount)&&i[s].mount();return i}function S(e,t,n){Object.defineProperty(e,t,n)}function x(e,t){var n=Object.assign({},e,t);return t.hasOwnProperty("classes")&&(n.classes=Object.assign({},e.classes,t.classes),t.classes.hasOwnProperty("direction")&&(n.classes.direction=Object.assign({},e.classes.direction,t.classes.direction)),t.classes.hasOwnProperty("type")&&(n.classes.type=Object.assign({},e.classes.type,t.classes.type)),t.classes.hasOwnProperty("slide")&&(n.classes.slide=Object.assign({},e.classes.slide,t.classes.slide)),t.classes.hasOwnProperty("arrow")&&(n.classes.arrow=Object.assign({},e.classes.arrow,t.classes.arrow)),t.classes.hasOwnProperty("nav")&&(n.classes.nav=Object.assign({},e.classes.nav,t.classes.nav))),t.hasOwnProperty("breakpoints")&&(n.breakpoints=Object.assign({},e.breakpoints,t.breakpoints)),n}var k=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.events=t,this.hop=t.hasOwnProperty}return o(e,[{key:"on",value:function(e,t){if(!b(e)){this.hop.call(this.events,e)||(this.events[e]=[]);var n=this.events[e].push(t)-1;return{remove:function(){delete this.events[e][n]}}}for(var i=0;i<e.length;i++)this.on(e[i],t)}},{key:"emit",value:function(e,t){if(b(e))for(var n=0;n<e.length;n++)this.emit(e[n],t);else this.hop.call(this.events,e)&&this.events[e].forEach((function(e){e(t||{})}))}}]),e}(),j=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(this,e),this._c={},this._t=[],this._e=new k,this.disabled=!1,this.selector=t,this.settings=x(g,n),this.index=this.settings.startAt}return o(e,[{key:"mount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._e.emit("mount.before"),v(e)?this._c=_(this,e,this._e):h("You need to provide a object on `mount()`"),this._e.emit("mount.after"),this}},{key:"mutate",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return b(e)?this._t=e:h("You need to provide a array on `mutate()`"),this}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.settings=x(this.settings,e),e.hasOwnProperty("startAt")&&(this.index=e.startAt),this._e.emit("update"),this}},{key:"go",value:function(e){return this._c.Run.make(e),this}},{key:"move",value:function(e){return this._c.Transition.disable(),this._c.Move.make(e),this}},{key:"destroy",value:function(){return this._e.emit("destroy"),this}},{key:"play",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e&&(this.settings.autoplay=e),this._e.emit("play"),this}},{key:"pause",value:function(){return this._e.emit("pause"),this}},{key:"disable",value:function(){return this.disabled=!0,this}},{key:"enable",value:function(){return this.disabled=!1,this}},{key:"on",value:function(e,t){return this._e.on(e,t),this}},{key:"isType",value:function(e){return this.settings.type===e}},{key:"settings",get:function(){return this._o},set:function(e){v(e)?this._o=e:h("Options must be an `object` instance.")}},{key:"index",get:function(){return this._i},set:function(e){this._i=m(e)}},{key:"type",get:function(){return this.settings.type}},{key:"disabled",get:function(){return this._d},set:function(e){this._d=!!e}}]),e}();function q(){return(new Date).getTime()}function L(e,t,n){var i,r,s,o,a=0;n||(n={});var c=function(){a=!1===n.leading?0:q(),i=null,o=e.apply(r,s),i||(r=s=null)},l=function(){var l=q();a||!1!==n.leading||(a=l);var d=t-(l-a);return r=this,s=arguments,d<=0||d>t?(i&&(clearTimeout(i),i=null),a=l,o=e.apply(r,s),i||(r=s=null)):i||!1===n.trailing||(i=setTimeout(c,d)),o};return l.cancel=function(){clearTimeout(i),a=0,i=r=s=null},l}var T={ltr:["marginLeft","marginRight"],rtl:["marginRight","marginLeft"]};function A(e){if(e&&e.parentNode){for(var t=e.parentNode.firstChild,n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}return[]}function H(e){return!!(e&&e instanceof window.HTMLElement)}var E='[data-glide-el="track"]';var O=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.listeners=t}return o(e,[{key:"on",value:function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]&&arguments[3];p(e)&&(e=[e]);for(var r=0;r<e.length;r++)this.listeners[e[r]]=n,t.addEventListener(e[r],this.listeners[e[r]],i)}},{key:"off",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];p(e)&&(e=[e]);for(var i=0;i<e.length;i++)t.removeEventListener(e[i],this.listeners[e[i]],n)}},{key:"destroy",value:function(){delete this.listeners}}]),e}();var C=["ltr","rtl"],P={">":"<","<":">","=":"="};function M(e,t){return{modify:function(e){return t.Direction.is("rtl")?-e:e}}}function D(e,t){return{modify:function(e){var n=Math.floor(e/t.Sizes.slideWidth);return e+t.Gaps.value*n}}}function z(e,t){return{modify:function(e){return e+t.Clones.grow/2}}}function R(e,t){return{modify:function(n){if(e.settings.focusAt>=0){var i=t.Peek.value;return v(i)?n-i.before:n-i}return n}}}function B(e,t){return{modify:function(n){var i=t.Gaps.value,r=t.Sizes.width,s=e.settings.focusAt,o=t.Sizes.slideWidth;return"center"===s?n-(r/2-o/2):n-o*s-i*s}}}var I=!1;try{var W=Object.defineProperty({},"passive",{get:function(){I=!0}});window.addEventListener("testPassive",null,W),window.removeEventListener("testPassive",null,W)}catch(e){}var F=I,V=["touchstart","mousedown"],G=["touchmove","mousemove"],Y=["touchend","touchcancel","mouseup","mouseleave"],U=["mousedown","mousemove","mouseup","mouseleave"];var X='[data-glide-el^="controls"]',N="".concat(X,' [data-glide-dir*="<"]'),$="".concat(X,' [data-glide-dir*=">"]');function K(e){return v(e)?(t=e,Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e[n],e}),{})):(h("Breakpoints option must be an object"),{});var t}var J={Html:function(e,t,n){var i={mount:function(){this.root=e.selector,this.track=this.root.querySelector(E),this.collectSlides()},collectSlides:function(){this.slides=Array.prototype.slice.call(this.wrapper.children).filter((function(t){return!t.classList.contains(e.settings.classes.slide.clone)}))}};return S(i,"root",{get:function(){return i._r},set:function(e){p(e)&&(e=document.querySelector(e)),H(e)?i._r=e:h("Root element must be a existing Html node")}}),S(i,"track",{get:function(){return i._t},set:function(e){H(e)?i._t=e:h("Could not find track element. Please use ".concat(E," attribute."))}}),S(i,"wrapper",{get:function(){return i.track.children[0]}}),n.on("update",(function(){i.collectSlides()})),i},Translate:function(e,t,n){var i={set:function(n){var i=function(e,t,n){var i=[D,z,R,B].concat(e._t,[M]);return{mutate:function(r){for(var s=0;s<i.length;s++){var o=i[s];y(o)&&y(o().modify)?r=o(e,t,n).modify(r):h("Transformer should be a function that returns an object with `modify()` method")}return r}}}(e,t).mutate(n),r="translate3d(".concat(-1*i,"px, 0px, 0px)");t.Html.wrapper.style.mozTransform=r,t.Html.wrapper.style.webkitTransform=r,t.Html.wrapper.style.transform=r},remove:function(){t.Html.wrapper.style.transform=""},getStartIndex:function(){var n=t.Sizes.length,i=e.index,r=e.settings.perView;return t.Run.isOffset(">")||t.Run.isOffset("|>")?n+(i-r):(i+r)%n},getTravelDistance:function(){var n=t.Sizes.slideWidth*e.settings.perView;return t.Run.isOffset(">")||t.Run.isOffset("|>")?-1*n:n}};return n.on("move",(function(r){if(!e.isType("carousel")||!t.Run.isOffset())return i.set(r.movement);t.Transition.after((function(){n.emit("translate.jump"),i.set(t.Sizes.slideWidth*e.index)}));var s=t.Sizes.slideWidth*t.Translate.getStartIndex();return i.set(s-t.Translate.getTravelDistance())})),n.on("destroy",(function(){i.remove()})),i},Transition:function(e,t,n){var i=!1,r={compose:function(t){var n=e.settings;return i?"".concat(t," 0ms ").concat(n.animationTimingFunc):"".concat(t," ").concat(this.duration,"ms ").concat(n.animationTimingFunc)},set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"transform";t.Html.wrapper.style.transition=this.compose(e)},remove:function(){t.Html.wrapper.style.transition=""},after:function(e){setTimeout((function(){e()}),this.duration)},enable:function(){i=!1,this.set()},disable:function(){i=!0,this.set()}};return S(r,"duration",{get:function(){var n=e.settings;return e.isType("slider")&&t.Run.offset?n.rewindDuration:n.animationDuration}}),n.on("move",(function(){r.set()})),n.on(["build.before","resize","translate.jump"],(function(){r.disable()})),n.on("run",(function(){r.enable()})),n.on("destroy",(function(){r.remove()})),r},Direction:function(e,t,n){var i={mount:function(){this.value=e.settings.direction},resolve:function(e){var t=e.slice(0,1);return this.is("rtl")?e.split(t).join(P[t]):e},is:function(e){return this.value===e},addClass:function(){t.Html.root.classList.add(e.settings.classes.direction[this.value])},removeClass:function(){t.Html.root.classList.remove(e.settings.classes.direction[this.value])}};return S(i,"value",{get:function(){return i._v},set:function(e){C.indexOf(e)>-1?i._v=e:h("Direction value must be `ltr` or `rtl`")}}),n.on(["destroy","update"],(function(){i.removeClass()})),n.on("update",(function(){i.mount()})),n.on(["build.before","update"],(function(){i.addClass()})),i},Peek:function(e,t,n){var i={mount:function(){this.value=e.settings.peek}};return S(i,"value",{get:function(){return i._v},set:function(e){v(e)?(e.before=m(e.before),e.after=m(e.after)):e=m(e),i._v=e}}),S(i,"reductor",{get:function(){var t=i.value,n=e.settings.perView;return v(t)?t.before/n+t.after/n:2*t/n}}),n.on(["resize","update"],(function(){i.mount()})),i},Sizes:function(e,t,n){var i={setupSlides:function(){for(var e="".concat(this.slideWidth,"px"),n=t.Html.slides,i=0;i<n.length;i++)n[i].style.width=e},setupWrapper:function(){t.Html.wrapper.style.width="".concat(this.wrapperSize,"px")},remove:function(){for(var e=t.Html.slides,n=0;n<e.length;n++)e[n].style.width="";t.Html.wrapper.style.width=""}};return S(i,"length",{get:function(){return t.Html.slides.length}}),S(i,"width",{get:function(){return t.Html.track.offsetWidth}}),S(i,"wrapperSize",{get:function(){return i.slideWidth*i.length+t.Gaps.grow+t.Clones.grow}}),S(i,"slideWidth",{get:function(){return i.width/e.settings.perView-t.Peek.reductor-t.Gaps.reductor}}),n.on(["build.before","resize","update"],(function(){i.setupSlides(),i.setupWrapper()})),n.on("destroy",(function(){i.remove()})),i},Gaps:function(e,t,n){var i={apply:function(e){for(var n=0,i=e.length;n<i;n++){var r=e[n].style,s=t.Direction.value;r[T[s][0]]=0!==n?"".concat(this.value/2,"px"):"",n!==e.length-1?r[T[s][1]]="".concat(this.value/2,"px"):r[T[s][1]]=""}},remove:function(e){for(var t=0,n=e.length;t<n;t++){var i=e[t].style;i.marginLeft="",i.marginRight=""}}};return S(i,"value",{get:function(){return m(e.settings.gap)}}),S(i,"grow",{get:function(){return i.value*t.Sizes.length}}),S(i,"reductor",{get:function(){var t=e.settings.perView;return i.value*(t-1)/t}}),n.on(["build.after","update"],L((function(){i.apply(t.Html.wrapper.children)}),30)),n.on("destroy",(function(){i.remove(t.Html.wrapper.children)})),i},Move:function(e,t,n){var i={mount:function(){this._o=0},make:function(){var e=this,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;this.offset=i,n.emit("move",{movement:this.value}),t.Transition.after((function(){n.emit("move.after",{movement:e.value})}))}};return S(i,"offset",{get:function(){return i._o},set:function(e){i._o=w(e)?0:m(e)}}),S(i,"translate",{get:function(){return t.Sizes.slideWidth*e.index}}),S(i,"value",{get:function(){var e=this.offset,n=this.translate;return t.Direction.is("rtl")?n+e:n-e}}),n.on(["build.before","run"],(function(){i.make()})),i},Clones:function(e,t,n){var i={mount:function(){this.items=[],e.isType("carousel")&&(this.items=this.collect())},collect:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],i=t.Html.slides,r=e.settings,s=r.perView,o=r.classes,a=r.cloningRatio;if(0!==i.length)for(var c=+!!e.settings.peek,l=s+c+Math.round(s/2),d=i.slice(0,l).reverse(),u=i.slice(-1*l),f=0;f<Math.max(a,Math.floor(s/i.length));f++){for(var g=0;g<d.length;g++){var h=d[g].cloneNode(!0);h.classList.add(o.slide.clone),n.push(h)}for(var m=0;m<u.length;m++){var p=u[m].cloneNode(!0);p.classList.add(o.slide.clone),n.unshift(p)}}return n},append:function(){for(var e=this.items,n=t.Html,i=n.wrapper,r=n.slides,s=Math.floor(e.length/2),o=e.slice(0,s).reverse(),a=e.slice(-1*s).reverse(),c="".concat(t.Sizes.slideWidth,"px"),l=0;l<a.length;l++)i.appendChild(a[l]);for(var d=0;d<o.length;d++)i.insertBefore(o[d],r[0]);for(var u=0;u<e.length;u++)e[u].style.width=c},remove:function(){for(var e=this.items,n=0;n<e.length;n++)t.Html.wrapper.removeChild(e[n])}};return S(i,"grow",{get:function(){return(t.Sizes.slideWidth+t.Gaps.value)*i.items.length}}),n.on("update",(function(){i.remove(),i.mount(),i.append()})),n.on("build.before",(function(){e.isType("carousel")&&i.append()})),n.on("destroy",(function(){i.remove()})),i},Resize:function(e,t,n){var i=new O,r={mount:function(){this.bind()},bind:function(){i.on("resize",window,L((function(){n.emit("resize")}),e.settings.throttle))},unbind:function(){i.off("resize",window)}};return n.on("destroy",(function(){r.unbind(),i.destroy()})),r},Build:function(e,t,n){var i={mount:function(){n.emit("build.before"),this.typeClass(),this.activeClass(),n.emit("build.after")},typeClass:function(){t.Html.root.classList.add(e.settings.classes.type[e.settings.type])},activeClass:function(){var n=e.settings.classes,i=t.Html.slides[e.index];i&&(i.classList.add(n.slide.active),A(i).forEach((function(e){e.classList.remove(n.slide.active)})))},removeClasses:function(){var n=e.settings.classes,i=n.type,r=n.slide;t.Html.root.classList.remove(i[e.settings.type]),t.Html.slides.forEach((function(e){e.classList.remove(r.active)}))}};return n.on(["destroy","update"],(function(){i.removeClasses()})),n.on(["resize","update"],(function(){i.mount()})),n.on("move.after",(function(){i.activeClass()})),i},Run:function(e,t,n){var i={mount:function(){this._o=!1},make:function(i){var r=this;e.disabled||(!e.settings.waitForTransition||e.disable(),this.move=i,n.emit("run.before",this.move),this.calculate(),n.emit("run",this.move),t.Transition.after((function(){r.isStart()&&n.emit("run.start",r.move),r.isEnd()&&n.emit("run.end",r.move),r.isOffset()&&(r._o=!1,n.emit("run.offset",r.move)),n.emit("run.after",r.move),e.enable()})))},calculate:function(){var t=this.move,n=this.length,r=t.steps,s=t.direction,o=1;if("="===s)return e.settings.bound&&m(r)>n?void(e.index=n):void(e.index=r);if(">"!==s||">"!==r)if("<"!==s||"<"!==r){if("|"===s&&(o=e.settings.perView||1),">"===s||"|"===s&&">"===r){var a=function(t){var n=e.index;if(e.isType("carousel"))return n+t;return n+(t-n%t)}(o);return a>n&&(this._o=!0),void(e.index=function(t,n){var r=i.length;if(t<=r)return t;if(e.isType("carousel"))return t-(r+1);if(e.settings.rewind)return i.isBound()&&!i.isEnd()?r:0;if(i.isBound())return r;return Math.floor(r/n)*n}(a,o))}if("<"===s||"|"===s&&"<"===r){var c=function(t){var n=e.index;if(e.isType("carousel"))return n-t;return(Math.ceil(n/t)-1)*t}(o);return c<0&&(this._o=!0),void(e.index=function(t,n){var r=i.length;if(t>=0)return t;if(e.isType("carousel"))return t+(r+1);if(e.settings.rewind)return i.isBound()&&i.isStart()?r:Math.floor(r/n)*n;return 0}(c,o))}h("Invalid direction pattern [".concat(s).concat(r,"] has been used"))}else e.index=0;else e.index=n},isStart:function(){return e.index<=0},isEnd:function(){return e.index>=this.length},isOffset:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return e?!!this._o&&("|>"===e?"|"===this.move.direction&&">"===this.move.steps:"|<"===e?"|"===this.move.direction&&"<"===this.move.steps:this.move.direction===e):this._o},isBound:function(){return e.isType("slider")&&"center"!==e.settings.focusAt&&e.settings.bound}};return S(i,"move",{get:function(){return this._m},set:function(e){var t=e.substr(1);this._m={direction:e.substr(0,1),steps:t?m(t)?m(t):t:0}}}),S(i,"length",{get:function(){var n=e.settings,i=t.Html.slides.length;return this.isBound()?i-1-(m(n.perView)-1)+m(n.focusAt):i-1}}),S(i,"offset",{get:function(){return this._o}}),i},Swipe:function(e,t,n){var i=new O,r=0,s=0,o=0,a=!1,c=!!F&&{passive:!0},l={mount:function(){this.bindSwipeStart()},start:function(t){if(!a&&!e.disabled){this.disable();var i=this.touches(t);r=null,s=m(i.pageX),o=m(i.pageY),this.bindSwipeMove(),this.bindSwipeEnd(),n.emit("swipe.start")}},move:function(i){if(!e.disabled){var a=e.settings,c=a.touchAngle,l=a.touchRatio,d=a.classes,u=this.touches(i),f=m(u.pageX)-s,g=m(u.pageY)-o,h=Math.abs(f<<2),p=Math.abs(g<<2),v=Math.sqrt(h+p),y=Math.sqrt(p);if(!(180*(r=Math.asin(y/v))/Math.PI<c))return!1;i.stopPropagation(),t.Move.make(f*parseFloat(l)),t.Html.root.classList.add(d.dragging),n.emit("swipe.move")}},end:function(i){if(!e.disabled){var o=e.settings,a=o.perSwipe,c=o.touchAngle,l=o.classes,d=this.touches(i),u=this.threshold(i),f=d.pageX-s,g=180*r/Math.PI;this.enable(),f>u&&g<c?t.Run.make(t.Direction.resolve("".concat(a,"<"))):f<-u&&g<c?t.Run.make(t.Direction.resolve("".concat(a,">"))):t.Move.make(),t.Html.root.classList.remove(l.dragging),this.unbindSwipeMove(),this.unbindSwipeEnd(),n.emit("swipe.end")}},bindSwipeStart:function(){var n=this,r=e.settings,s=r.swipeThreshold,o=r.dragThreshold;s&&i.on(V[0],t.Html.wrapper,(function(e){n.start(e)}),c),o&&i.on(V[1],t.Html.wrapper,(function(e){n.start(e)}),c)},unbindSwipeStart:function(){i.off(V[0],t.Html.wrapper,c),i.off(V[1],t.Html.wrapper,c)},bindSwipeMove:function(){var n=this;i.on(G,t.Html.wrapper,L((function(e){n.move(e)}),e.settings.throttle),c)},unbindSwipeMove:function(){i.off(G,t.Html.wrapper,c)},bindSwipeEnd:function(){var e=this;i.on(Y,t.Html.wrapper,(function(t){e.end(t)}))},unbindSwipeEnd:function(){i.off(Y,t.Html.wrapper)},touches:function(e){return U.indexOf(e.type)>-1?e:e.touches[0]||e.changedTouches[0]},threshold:function(t){var n=e.settings;return U.indexOf(t.type)>-1?n.dragThreshold:n.swipeThreshold},enable:function(){return a=!1,t.Transition.enable(),this},disable:function(){return a=!0,t.Transition.disable(),this}};return n.on("build.after",(function(){t.Html.root.classList.add(e.settings.classes.swipeable)})),n.on("destroy",(function(){l.unbindSwipeStart(),l.unbindSwipeMove(),l.unbindSwipeEnd(),i.destroy()})),l},Images:function(e,t,n){var i=new O,r={mount:function(){this.bind()},bind:function(){i.on("dragstart",t.Html.wrapper,this.dragstart)},unbind:function(){i.off("dragstart",t.Html.wrapper)},dragstart:function(e){e.preventDefault()}};return n.on("destroy",(function(){r.unbind(),i.destroy()})),r},Anchors:function(e,t,n){var i=new O,r=!1,s=!1,o={mount:function(){this._a=t.Html.wrapper.querySelectorAll("a"),this.bind()},bind:function(){i.on("click",t.Html.wrapper,this.click)},unbind:function(){i.off("click",t.Html.wrapper)},click:function(e){s&&(e.stopPropagation(),e.preventDefault())},detach:function(){if(s=!0,!r){for(var e=0;e<this.items.length;e++)this.items[e].draggable=!1;r=!0}return this},attach:function(){if(s=!1,r){for(var e=0;e<this.items.length;e++)this.items[e].draggable=!0;r=!1}return this}};return S(o,"items",{get:function(){return o._a}}),n.on("swipe.move",(function(){o.detach()})),n.on("swipe.end",(function(){t.Transition.after((function(){o.attach()}))})),n.on("destroy",(function(){o.attach(),o.unbind(),i.destroy()})),o},Controls:function(e,t,n){var i=new O,r=!!F&&{passive:!0},s={mount:function(){this._n=t.Html.root.querySelectorAll('[data-glide-el="controls[nav]"]'),this._c=t.Html.root.querySelectorAll(X),this._arrowControls={previous:t.Html.root.querySelectorAll(N),next:t.Html.root.querySelectorAll($)},this.addBindings()},setActive:function(){for(var e=0;e<this._n.length;e++)this.addClass(this._n[e].children)},removeActive:function(){for(var e=0;e<this._n.length;e++)this.removeClass(this._n[e].children)},addClass:function(t){var n=e.settings,i=t[e.index];i&&i&&(i.classList.add(n.classes.nav.active),A(i).forEach((function(e){e.classList.remove(n.classes.nav.active)})))},removeClass:function(t){var n=t[e.index];n&&n.classList.remove(e.settings.classes.nav.active)},setArrowState:function(){if(!e.settings.rewind){var n=s._arrowControls.next,i=s._arrowControls.previous;this.resetArrowState(n,i),0===e.index&&this.disableArrow(i),e.index===t.Run.length&&this.disableArrow(n)}},resetArrowState:function(){for(var t=e.settings,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];i.forEach((function(e){e.forEach((function(e){e.classList.remove(t.classes.arrow.disabled)}))}))},disableArrow:function(){for(var t=e.settings,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];i.forEach((function(e){e.forEach((function(e){e.classList.add(t.classes.arrow.disabled)}))}))},addBindings:function(){for(var e=0;e<this._c.length;e++)this.bind(this._c[e].children)},removeBindings:function(){for(var e=0;e<this._c.length;e++)this.unbind(this._c[e].children)},bind:function(e){for(var t=0;t<e.length;t++)i.on("click",e[t],this.click),i.on("touchstart",e[t],this.click,r)},unbind:function(e){for(var t=0;t<e.length;t++)i.off(["click","touchstart"],e[t])},click:function(e){F||"touchstart"!==e.type||e.preventDefault();var n=e.currentTarget.getAttribute("data-glide-dir");t.Run.make(t.Direction.resolve(n))}};return S(s,"items",{get:function(){return s._c}}),n.on(["mount.after","move.after"],(function(){s.setActive()})),n.on(["mount.after","run"],(function(){s.setArrowState()})),n.on("destroy",(function(){s.removeBindings(),s.removeActive(),i.destroy()})),s},Keyboard:function(e,t,n){var i=new O,r={mount:function(){e.settings.keyboard&&this.bind()},bind:function(){i.on("keyup",document,this.press)},unbind:function(){i.off("keyup",document)},press:function(n){var i=e.settings.perSwipe;39===n.keyCode&&t.Run.make(t.Direction.resolve("".concat(i,">"))),37===n.keyCode&&t.Run.make(t.Direction.resolve("".concat(i,"<")))}};return n.on(["destroy","update"],(function(){r.unbind()})),n.on("update",(function(){r.mount()})),n.on("destroy",(function(){i.destroy()})),r},Autoplay:function(e,t,n){var i=new O,r={mount:function(){this.enable(),this.start(),e.settings.hoverpause&&this.bind()},enable:function(){this._e=!0},disable:function(){this._e=!1},start:function(){var i=this;this._e&&(this.enable(),e.settings.autoplay&&w(this._i)&&(this._i=setInterval((function(){i.stop(),t.Run.make(">"),i.start(),n.emit("autoplay")}),this.time)))},stop:function(){this._i=clearInterval(this._i)},bind:function(){var e=this;i.on("mouseover",t.Html.root,(function(){e._e&&e.stop()})),i.on("mouseout",t.Html.root,(function(){e._e&&e.start()}))},unbind:function(){i.off(["mouseover","mouseout"],t.Html.root)}};return S(r,"time",{get:function(){var n=t.Html.slides[e.index].getAttribute("data-glide-autoplay");return m(n||e.settings.autoplay)}}),n.on(["destroy","update"],(function(){r.unbind()})),n.on(["run.before","swipe.start","update"],(function(){r.stop()})),n.on(["pause","destroy"],(function(){r.disable(),r.stop()})),n.on(["run.after","swipe.end"],(function(){r.start()})),n.on(["play"],(function(){r.enable(),r.start()})),n.on("update",(function(){r.mount()})),n.on("destroy",(function(){i.destroy()})),r},Breakpoints:function(e,t,n){var i=new O,r=e.settings,s=K(r.breakpoints),o=Object.assign({},r),a={match:function(e){if(void 0!==window.matchMedia)for(var t in e)if(e.hasOwnProperty(t)&&window.matchMedia("(max-width: ".concat(t,"px)")).matches)return e[t];return o}};return Object.assign(r,a.match(s)),i.on("resize",window,L((function(){e.settings=x(r,a.match(s))}),e.settings.throttle)),n.on("update",(function(){s=K(s),o=Object.assign({},r)})),n.on("destroy",(function(){i.off("resize",window)})),a}},Q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(n,e);var t=d(n);function n(){return r(this,n),t.apply(this,arguments)}return o(n,[{key:"mount",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return f(a(n.prototype),"mount",this).call(this,Object.assign({},J,e))}}]),n}(j)},"./node_modules/@glidejs/glide/dist/css/glide.core.min.css":(e,t,n)=>{n.r(t)},"./src/css/style.css":(e,t,n)=>{n.r(t)},"./src/js/component.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var i=n("./src/images/hero/hero-1.jpg"),r=n("./src/images/hero/hero-2.jpg"),s=n("./src/images/hero/hero-3.jpg"),o=n("./src/images/hero/ymc.jpg"),a=n("./src/images/hero/attachment-project.jpg"),c=n("./src/images/hero/boringbits.jpg"),l=n("./src/images/hero/mind-only.jpg"),d=n("./src/images/hero/areia-studio-swimwear.jpg"),u=n("./src/images/hero/alter-venture-partners.jpg"),f=n("./src/images/hero/briefar.jpg"),g=n("./src/images/hero/our-process.png"),h=n("./src/images/hero/decentralized-banner.jpg"),m=n("./src/images/studio/work-1.jpg"),p=n("./src/images/studio/work-2.jpg"),v=n("./src/images/studio/work-3.jpg"),y=n("./src/images/studio/work-4.jpg"),w=n("./src/images/studio/what-we-do.jpg"),b=n("./src/images/studio/pedro.jpg"),_=n("./src/images/studio/eduardo.jpg"),S=n("./src/images/studio/next-gen.png"),x=n("./src/js/slider.js");const k=function(){const e=document.querySelector(".preloader"),t=document.querySelector(".hero .grid .grid__item--1"),n=document.querySelector(".hero .grid .grid__item--2"),k=document.querySelector(".hero .grid .grid__item--3"),j=document.querySelector(".hero .grid .grid__item--4"),q=document.querySelector(".hero .grid .grid__item--5");function L([...e],t){setTimeout((()=>{e.forEach((e=>{e.classList.remove("hidden")}))}),t)}let T=document.querySelector(".hero__slide--1"),A=document.querySelector(".hero__slide--2"),H=document.querySelector(".hero__slide--3");const E=document.querySelector(".nav"),O=document.querySelector(".menu"),C=document.querySelector(".close-nav");if(O.addEventListener("click",(()=>{E.classList.add("nav--open")})),C.addEventListener("click",(()=>{E.classList.remove("nav--open")})),"home"===document.body.id){setTimeout((()=>{e.classList.add("preloader--complete")}),4700),L([t,n,q,k,j],4700),(0,x.default)();let W=document.querySelector(".decentralized-studio-img"),F=document.querySelector(".product-idea-img");W.src=h,W.alt="Decentralized Studio",T.src=i,T.alt="Hero Slide 1",A.src=r,A.alt="Hero Slide 2",H.src=s,H.alt="Hero Slide 3",F.src=g,F.alt="Our Process";let V=window.innerHeight/2,G=window.innerHeight/8,Y=document.body,U=document.querySelector(".remarkable-experiences").offsetTop-V,X=document.querySelector(".decentarlized-studio").offsetTop-G;window.addEventListener("scroll",(function(){let e=window.pageYOffset;e>=U&&e<=X?Y.classList.add("light-theme"):Y.classList.remove("light-theme")}))}if("work"===document.body.id){L([t,n,q,k,j],1e3);let N=document.querySelector(".hero__slide--4");(0,x.default)(),T.src=m,T.alt="Work Slide 1",A.src=p,A.alt="Work Slide 2",H.src=v,H.alt="Work Slide 3",N.src=y,N.alt="Work Slide 4";let $=document.querySelectorAll(".featured__work");$.forEach(((e,t)=>{t%2==0?e.classList.add("featured__work--left-img"):e.classList.add("featured__work--right-img")}));const K=document.querySelector("#loadMore"),J=[...$];J.splice(0,3).forEach((e=>{e.style.display="flex"})),K.addEventListener("click",(function(e){e.preventDefault(),J.splice(0,3).forEach((e=>{e.classList.remove("hidden")})),0==J.length&&(K.style.display="none")}));let Q=window.innerHeight/2,Z=window.innerHeight/2,ee=document.querySelector(".featured-works").offsetTop-Q,te=document.querySelector(".we-can-help").offsetTop-Z;window.addEventListener("scroll",(function(){let e=window.pageYOffset;e>=ee&&e<=te?document.body.classList.add("light-theme"):document.body.classList.remove("light-theme")}))}if("studio"===document.body.id){L([document.querySelector(".intro .grid .grid__item--1"),document.querySelector(".intro .grid .grid__item--2"),document.querySelector(".intro .grid .grid__item--3")],1e3);const ne=document.querySelector(".what-we-do-img"),ie=document.querySelector(".img-team-1"),re=document.querySelector(".img-team-2"),se=document.querySelector(".next-gen-img");ne.src=w,ne.alt="What We Do",ie.src=b,ie.alt="Pedro Gil",re.src=_,re.alt="Eduardo Martins",se.src=S,se.alt="Forwwward Studio Next Generation";let oe=window.innerHeight/2,ae=window.innerHeight/2,ce=document.querySelector(".what-we-do").offsetTop-oe,le=document.querySelector(".next-generation").offsetTop-ae;window.addEventListener("scroll",(function(){let e=window.pageYOffset;e>=ce&&e<=le?document.body.classList.add("light-theme"):document.body.classList.remove("light-theme")}))}if("contact"===document.body.id){const de=document.querySelector("#nameLabel"),ue=document.querySelector("#name"),fe=document.querySelector("#emailLabel"),ge=document.querySelector("#email"),he=document.querySelector("#messageLabel"),me=document.querySelector("#message"),pe=document.querySelector("#upload-file"),ve=document.querySelector("#check"),ye=document.querySelector("#attachText"),we=document.querySelector("#contactHeading"),be=document.querySelector(".form"),_e=document.querySelector("#contactText"),Se=document.querySelector(".contact__info"),xe=document.querySelector("#submit"),ke=document.querySelectorAll(".error-line"),je=document.querySelectorAll(".error-info");function qe(e,t){e.addEventListener("keyup",(function(){""!==e.value?t.style.display="none":t.style.display="inline-block"}))}L([we,_e,be,Se],1e3),qe(ue,de),qe(ge,fe),qe(me,he),pe.addEventListener("change",(function(){let e=pe.files[0].name;ye.innerText=e})),xe.addEventListener("click",(e=>{""!==ue.value&&""!==ge.value&&""!==me.value&&!1!==ve.checked||(e.preventDefault(),ke.forEach((e=>{e.style.width="100%"})),je.forEach((e=>{e.style.opacity=1})))}))}let P=document.querySelectorAll(".ymc-img"),M=document.querySelectorAll(".atc-img"),D=document.querySelectorAll(".boringbits-img"),z=document.querySelectorAll(".mo-img"),R=document.querySelectorAll(".ast-img"),B=document.querySelectorAll(".avp-img"),I=document.querySelectorAll(".briefar-img");P.forEach((e=>{e.src=o,e.alt="Forwwward Studio Project YMC"})),M.forEach((e=>{e.src=a,e.alt="Forwwward Studio Project Attachment"})),D.forEach((e=>{e.src=c})),z.forEach((e=>{e.src=l,e.alt="Forwwward Studio Project MindOnly"})),R.forEach((e=>{e.src=d,e.alt="Forwwward Studio Project Arie Studio Swimmwear"})),B.forEach((e=>{e.src=u,e.alt="Forwwward Studio Project Alter Venture PArtners"})),I.forEach((e=>{e.src=f,e.alt="Forwwward Studio Project Briefar"}))}},"./src/js/footer.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});const i=function(){function e(e){if(e.matches){const e='\n                    <footer class="footer footer--sm">\n                        <div class="grid">\n                            <div class="grid__item grid__item--1">\n                                <div class="logo">\n                                    <a class="logo--text" href="index.html">Forwwward.</a>\n                                </div>\n                        \n                                <div class="general-inquires">\n                                    <p class="text--secondary">General Inquires</p>\n                                        <a class="email" href="mailto:#">hello@forwwward.studio</a>\n                                    </div>\n                                </div>\n                            <div class="grid__item grid__item--2">\n                                <p class="text--secondary">Location: <span>worldwide</span></p>\n                            </div>\n                            <div class="grid__item grid__item--3">\n                                <p class="text--primary">Forwwward Studio © Copyright</p>\n                            </div>\n                        </div>\n                    </footer>';if("contact"!==document.body.id){document.body.insertAdjacentHTML("beforeend",e);const t=document.querySelector(".footer--lg");void 0!==t&&null!=t&&t.remove()}}else{const e='\n                        <footer class="footer footer--lg">\n                            <div class="grid">\n                                <div class="grid__item grid__item--1">\n                                    <div class="logo">\n                                        <a class="logo--text" href="index.html">Forwwward.</a>\n                                    </div>\n\n                                    <div class="general-inquires">\n                                        <p class="text--secondary">General Inquires</p>\n                                        <a class="email" href="mailto:#">hello@forwwward.studio</a>\n                                    </div>\n                                </div>\n                                <div class="grid__item grid__item--2">\n                                    \n                                </div>\n                                <div class="grid__item grid__item--3">\n                                    <p class="footer--copy">Forwwward Studio © Copyright</p>\n                                </div>\n                                <div class="grid__item grid__item--4">\n                                    <h6 class="heading heading--footer">About</h6>\n                                    <ul>\n                                        <li><a class="footer--link" href="studio.html">About</a></li>\n                                        <li><a class="footer--link" href="index.html#culture">Culture</a></li>\n                                        <li><a class="footer--link" href="contact.html">Contact</a></li>\n                                    </ul>\n                                </div>\n                                <div class="grid__item grid__item--5">\n                                    <h6 class="heading heading--footer">Resources</h6>\n                                    <ul>\n                                        <li><a class="footer--link" href="work.html">Work</a></li>\n                                        <li><a class="footer--link" href="#">Process</a></li>\n                                        <li><a class="footer--link" href="studio.html#whatWeDo">Services</a></li>\n                                    </ul>\n                                </div>\n                                <div class="grid__item grid__item--6">\n                                    <h6 class="heading heading--footer">Follow us</h6>\n                                    <ul>\n                                        <li><a class="footer--link" href="https://www.behance.net/">Behance</a></li>\n                                        <li><a class="footer--link" href="https://dribbble.com/">Dribbble</a></li>\n                                        <li><a class="footer--link" href="https://www.linkedin.com/">Instagram</a></li>\n                                    </ul>\n                                </div>\n                                <div class="grid__item grid__item--7">\n                                    <small class="footer--privacy">Cookie Policy</small>\n                                </div>\n                                <div class="grid__item grid__item--8">\n                                    <small class="footer--privacy">Privacy Policy</small>\n                                </div>\n                                <div class="grid__item grid__item--9">\n                                    <small class="footer--privacy">Location: <span>Worldwide</span></small>\n                                </div>\n                            </div>\n                        </footer>';if("contact"!==document.body.id){document.body.insertAdjacentHTML("beforeend",e);const t=document.querySelector(".footer--sm");void 0!==t&&null!=t&&t.remove()}}}let t=window.matchMedia("(max-width: 767px)");e(t),t.addListener(e)}},"./src/js/slider.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});const i=function(){const e=document.querySelectorAll(".hero__slide"),t=document.querySelector(".hero__prev"),n=document.querySelector(".hero__next"),i=document.querySelector(".dragg"),r=100/e.length,s=document.querySelectorAll(".lineEl");function o(t){e.forEach(((e,n)=>{e.style.transform=`translateX(${100*(n-t)}%)`}))}o(0);let a=0;const c=e.length;n.addEventListener("click",(function(e){e.preventDefault(),a===c-1?(a=0,i.style.left="0%"):(a++,i.style.left=a*r+"%"),o(a)})),t.addEventListener("click",(function(e){e.preventDefault(),0===a?(a=c-1,i.style.left=(s.length-1)*r+"%"):(a--,i.style.left=a*r+"%",i.style.left-=`${r}%`),o(a)})),s.forEach(((e,t)=>{e.addEventListener("click",(function(){i.style.left=r*t+"%",a=t,o(a)}))}))}},"./src/js/smooth-scroll.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});const i=function(){function e(t,n,i){let r=25*n/i;r<n&&(t.scrollTop+=r,setTimeout((function(){e(t,n-r,i)}),25))}document.addEventListener("wheel",(function(t){t.deltaY>0&&e(document.documentElement,100,1e3)}))}},"./src/js/work-showcase.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var i=n("./node_modules/@glidejs/glide/dist/glide.esm.js");n("./node_modules/@glidejs/glide/dist/css/glide.core.min.css");const r=function(){let e=document.querySelector("#remarkableExperiences");function t(t){if(t.matches){const t='<div class="grid remarkable-experiences-mobile">\n                <div class="grid__item grid__item--1">\n                    <h4 class="heading heading--quaternary">Work</h4>\n                </div>\n                <div class="grid__item grid__item--2">\n                    <h2 class="heading heading--secondary">Remarkable <span class="heading--underline">experiences</span></h2>\n                </div>\n                <div class="grid__item grid__item--3">\n                    <div class="card">\n                        <a class="card__img" href="#">\n                            <img class="ymc-img" src="" alt="">\n                        </a>\n                        <h2 class="heading heading--secondary">YMC</h2>\n                        <p class="text--quaternary">YMC is a software engineering consultancy,\n                            helping digital projects succeed by\n                            fostering a progressive culture of learning\n                            with pure flexibility&#46;&#46;&#46;\n                        </p>\n                        <div class="button__container">\n                            <a class="btn" href="#">\n                                <span>See More</span>\n                                <div class="circle">\n                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\n                                        \x3c!--! Font Awesome Pro 6.0.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e\n                                        <path\n                                            d="M502.6 278.6l-128 128c-12.51 12.51-32.76 12.49-45.25 0c-12.5-12.5-12.5-32.75 0-45.25L402.8 288H32C14.31 288 0 273.7 0 255.1S14.31 224 32 224h370.8l-73.38-73.38c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l128 128C515.1 245.9 515.1 266.1 502.6 278.6z" />\n                                        </svg>\n                                </div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class="grid__item grid__item--4">\n                    <div class="card">\n                        <a class="card__img" href="#">\n                            <img class="atc-img" src="" alt="">\n                        </a>\n                        <h2 class="heading heading--secondary">Attachment Project</h2>\n                        <p class="text--quaternary">Attachment project is online platform focused on healing attachment\n                            disorders with online courses done by world renowned specialists in&#46;&#46;&#46;</p>\n                        <div class="button__container">\n                            <a class="btn" href="#">\n                                <span>See More</span>\n                                <div class="circle">\n                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\n                                        \x3c!--! Font Awesome Pro 6.0.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e\n                                        <path\n                                            d="M502.6 278.6l-128 128c-12.51 12.51-32.76 12.49-45.25 0c-12.5-12.5-12.5-32.75 0-45.25L402.8 288H32C14.31 288 0 273.7 0 255.1S14.31 224 32 224h370.8l-73.38-73.38c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l128 128C515.1 245.9 515.1 266.1 502.6 278.6z" />\n                                        </svg>\n                                </div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class="grid__item grid__item--5">\n                    <div class="card">\n                        <a class="card__img" href="#">\n                            <img class="boringbits-img" src="" alt="">\n                        </a>\n                        <h2 class="heading heading--secondary">Boringbits</h2>\n                        <p class="text--quaternary">Boringbits believe entrepreneurs shouldn\'t\n                            need a background in finance to have better\n                            odds of success, as 1 in 3 business&#46;&#46;&#46;\n                        </p>\n                        <div class="button__container">\n                            <a class="btn" href="#">\n                                <span>See More</span>\n                                <div class="circle">\n                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\n                                        \x3c!--! Font Awesome Pro 6.0.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --\x3e\n                                        <path\n                                            d="M502.6 278.6l-128 128c-12.51 12.51-32.76 12.49-45.25 0c-12.5-12.5-12.5-32.75 0-45.25L402.8 288H32C14.31 288 0 273.7 0 255.1S14.31 224 32 224h370.8l-73.38-73.38c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l128 128C515.1 245.9 515.1 266.1 502.6 278.6z" />\n                                        </svg>\n                                </div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class="grid__item grid__item--6">\n                    <a href="work.html" class="button--link">See<br>More</a>\n                </div>\n                </div>';if("home"===document.body.id){e.insertAdjacentHTML("afterbegin",t);const n=document.querySelector(".remarkable-experiences-lg");void 0!==n&&null!=n&&n.remove()}}else{const t='<div class="remarkable-experiences-slider remarkable-experiences-lg">\n                <div class="grid">\n                    <div class="grid__item grid__item--1">\n                        <h4 class="heading heading--quaternary">Work</h4>\n                    </div>\n                    <div class="grid__item grid__item--2">\n                        <h2 class="heading heading--secondary">Remarkable <span class="heading--underline">experiences</span></h2>\n                    </div>\n                    <div class="grid__item grid__item--3">\n                        <div class="glide">\n                            <div class="glide__track" data-glide-el="track">\n                              <ul class="glide__slides">\n                                <li class="glide__slide">\n                                    <span class="glide__slide--type">Strategy UX &amp; UI</span>\n                                    <a class="glide__slide__heading" href="#"><h2>YMC</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="ymc-img" src="" alt="">\n                                    </a>\n                                </li>\n                                <li class="glide__slide">\n                                    <span class="glide__slide--type">Branding Creative direction UX &amp; UI</span>\n                                    <a class="glide__slide__heading" href="#"><h2>Attachment Project</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="atc-img" src="" alt="">\n                                    </a>\n                                </li>\n                                <li class="glide__slide">\n                                    <span class="glide__slide--type">Branding Strategy UX</span>\n                                    <a class="glide__slide__heading" href="#"><h2>Boringbits</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="boringbits-img" src="" alt="">\n                                    </a>\n                                </li>\n                                <li class="glide__slide">\n                                    <span class="glide__slide--type">Branding Graphic Design UI &amp; UX</span>\n                                    <a class="glide__slide__heading" href="#"><h2>Mind Only</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="mo-img" src="" alt="">\n                                    </a>\n                                </li>\n                                <li class="glide__slide"">\n                                    <span class="glide__slide--type">Strategy UX &amp; UI</span>\n                                    <a class="glide__slide__heading" href="#"><h2>Areia Studio Swimmwear</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="ast-img" src="" alt="">\n                                    </a>\n                                </li>\n                                <li class="glide__slide">\n                                    <span class="glide__slide--type">Branding Creative Direction</span>\n                                    <a class="glide__slide__heading" href="#"><h2>Alter Venture Partners</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="avp-img" src="" alt="">\n                                    </a>\n                                </li>\n                                <li class="glide__slide">\n                                    <span class="glide__slide--type">Branding Creative Direction UX &amp; UI</span>\n                                    <a class="glide__slide__heading" href="#"><h2>Briefar</h2></a>\n                                    <a href="#" class="image__container">\n                                        <img class="briefar-img" src="" alt="">\n                                    </a>\n                                </li>\n                              </ul>\n                            </div>\n                            <a class="glider-prev" href="#" id="api-go-prev">\n                            <?xml version="1.0" encoding="iso-8859-1"?>\n                            \x3c!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e\n                            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n                            <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"\n                                y="0px" width="400.004px" height="400.004px" viewBox="0 0 400.004 400.004"\n                                style="enable-background:new 0 0 400.004 400.004;" xml:space="preserve">\n                                <g>\n                                    <path d="M382.688,182.686H59.116l77.209-77.214c6.764-6.76,6.764-17.726,0-24.485c-6.764-6.764-17.73-6.764-24.484,0L5.073,187.757\n                                    c-6.764,6.76-6.764,17.727,0,24.485l106.768,106.775c3.381,3.383,7.812,5.072,12.242,5.072c4.43,0,8.861-1.689,12.242-5.072\n                                    c6.764-6.76,6.764-17.726,0-24.484l-77.209-77.218h323.572c9.562,0,17.316-7.753,17.316-17.315\n                                    C400.004,190.438,392.251,182.686,382.688,182.686z" />\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                                <g>\n                                </g>\n                            </svg>\n                            </a>\n                            <a class="glider-next" href="#" id="api-go-next"><?xml version="1.0" encoding="iso-8859-1"?>\n                            \x3c!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e\n                            <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n                                 viewBox="0 0 330 330" style="enable-background:new 0 0 330 330;" xml:space="preserve">\n                            <path id="XMLID_27_" d="M15,180h263.787l-49.394,49.394c-5.858,5.857-5.858,15.355,0,21.213C232.322,253.535,236.161,255,240,255\n                                s7.678-1.465,10.606-4.394l75-75c5.858-5.857,5.858-15.355,0-21.213l-75-75c-5.857-5.857-15.355-5.857-21.213,0\n                                c-5.858,5.857-5.858,15.355,0,21.213L278.787,150H15c-8.284,0-15,6.716-15,15S6.716,180,15,180z"/>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            <g>\n                            </g>\n                            </svg>\n                            </a>\n                          </div>\n                    </div>\n                </div>\n            </div>';if("home"===document.body.id){e.insertAdjacentHTML("afterbegin",t);const r=document.querySelector(".remarkable-experiences-mobile");void 0!==r&&null!=r&&r.remove();let s=document.querySelector("#api-go-prev"),o=document.querySelector("#api-go-next");var n=new i.default(".glide",{type:"carousel",startAt:0,perView:3,gap:35,peek:{before:0,after:0},breakpoints:{1089:{perView:2,gap:25},768:{perView:2,gap:35}}});s.addEventListener("click",(function(e){e.preventDefault(),n.go("<")})),o.addEventListener("click",(function(e){e.preventDefault(),n.go(">")})),n.mount()}}}let n=window.matchMedia("(max-width: 767px)");t(n),n.addListener(t)}},"./src/images/hero/alter-venture-partners.jpg":(e,t,n)=>{e.exports=n.p+"alter-venture-partners365073d8e9c03a104920..jpg"},"./src/images/hero/areia-studio-swimwear.jpg":(e,t,n)=>{e.exports=n.p+"areia-studio-swimwear0581d94c7a03766d06d9..jpg"},"./src/images/hero/attachment-project.jpg":(e,t,n)=>{e.exports=n.p+"attachment-project44be2063d05c99415da6..jpg"},"./src/images/hero/boringbits.jpg":(e,t,n)=>{e.exports=n.p+"boringbitsaeb9dd202a691d9f36d6..jpg"},"./src/images/hero/briefar.jpg":(e,t,n)=>{e.exports=n.p+"briefard54f636f646dc9078ccc..jpg"},"./src/images/hero/decentralized-banner.jpg":(e,t,n)=>{e.exports=n.p+"decentralized-bannera0c3d7bbe8d5bacbcdf4..jpg"},"./src/images/hero/hero-1.jpg":(e,t,n)=>{e.exports=n.p+"hero-19292f2e3e5cebea7e194..jpg"},"./src/images/hero/hero-2.jpg":(e,t,n)=>{e.exports=n.p+"hero-2ef942ca34598b9e7cb4e..jpg"},"./src/images/hero/hero-3.jpg":(e,t,n)=>{e.exports=n.p+"hero-36152e2115076c349c660..jpg"},"./src/images/hero/mind-only.jpg":(e,t,n)=>{e.exports=n.p+"mind-onlyc3122a443f309be9e38d..jpg"},"./src/images/hero/our-process.png":(e,t,n)=>{e.exports=n.p+"our-processb4c2e2ff40dcdf9d9ad7..png"},"./src/images/hero/ymc.jpg":(e,t,n)=>{e.exports=n.p+"ymc771c746fde57e506cb7f..jpg"},"./src/images/studio/eduardo.jpg":(e,t,n)=>{e.exports=n.p+"eduardod596c9578550208a01ab..jpg"},"./src/images/studio/next-gen.png":(e,t,n)=>{e.exports=n.p+"next-genc7f361bcdceb2597b21e..png"},"./src/images/studio/pedro.jpg":(e,t,n)=>{e.exports=n.p+"pedro6c73259ac0b8e04d5b61..jpg"},"./src/images/studio/what-we-do.jpg":(e,t,n)=>{e.exports=n.p+"what-we-do05c70ea17f3b80633e17..jpg"},"./src/images/studio/work-1.jpg":(e,t,n)=>{e.exports=n.p+"work-1e0e86db0879c92d7b335..jpg"},"./src/images/studio/work-2.jpg":(e,t,n)=>{e.exports=n.p+"work-2814ef98cad0c029730aa..jpg"},"./src/images/studio/work-3.jpg":(e,t,n)=>{e.exports=n.p+"work-3e9f9e9d16eac612c8a50..jpg"},"./src/images/studio/work-4.jpg":(e,t,n)=>{e.exports=n.p+"work-45e2a8c49560e6eb5b04e..jpg"}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var s=t[i]={exports:{}};return e[i](s,s.exports,n),s.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})();var i={};(()=>{n.r(i);n("./src/css/style.css");var e=n("./src/js/smooth-scroll.js"),t=n("./src/js/work-showcase.js"),r=n("./src/js/component.js"),s=n("./src/js/footer.js");(0,e.default)(),(0,t.default)(),(0,r.default)(),(0,s.default)()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,